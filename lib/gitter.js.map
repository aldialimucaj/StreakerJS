{"version":3,"sources":["gitter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,UAAU,GAAG,kBAAQ,UAAU,CAAC;AACtC,IAAM,KAAK,GAAG,gBAAM,IAAI,CAAC,GAAG,CAAC;AAC7B,IAAM,OAAO,GAAG,gBAAM,IAAI,CAAC,KAAK,CAAC;;IAEZ,MAAM;;;;;;;AAMvB,aANiB,MAAM,CAMX,IAAI,EAAE;8BAND,MAAM;KAQtB;;;;;;;;AAAA;iBARgB,MAAM;;mCAgBF;gBAAZ,IAAI,yDAAG,GAAG;;AAEf,mBAAO,sBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;;AAEpC,0BAAU,CAAC,IAAI,CAAC,eAAS,OAAO,CAAC,IAAI,CAAC,EAAE,cAAC,CAAc,CAAC,IAAI,CAAC,UAAS,UAAU,EAAE;;AAE9E,2BAAO,CAAC,GAAG,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC,CAAC;AAC5D,2BAAO,EAAE,CAAC;iBACb,EAAE,UAAS,GAAG,EAAE;AACb,2BAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,0BAAM,CAAC,GAAG,CAAC,CAAC;iBACf,CAAC,CAAC;aAEN,CAAC,CAAC;SAGN;;;WAhCgB,MAAM;;;kBAAN,MAAM","file":"gitter.js","sourcesContent":["import chalk from 'chalk';\r\nimport nodegit from 'nodegit'; \r\nimport nodepath from 'path';\r\nimport Promise from 'promise';\r\n\r\nconst Repository = nodegit.Repository;\r\nconst error = chalk.bold.red;\r\nconst success = chalk.bold.green;\r\n\r\nexport default class Gitter {\r\n    \r\n    /**\r\n     * @constructor\r\n     * @param {string} repo - git repository\r\n     */\r\n    constructor(repo) {\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Initialize git repository\r\n     * \r\n     * @param {string} path - path to create new git repo\r\n     * @returns {promise}\r\n     */\r\n    initRepo(path = \".\") {\r\n        \r\n        return new Promise((fulfill, reject) => {\r\n            \r\n            Repository.init(nodepath.resolve(path), 0 /* isBare */).then(function(repository) {\r\n                // Use repository  \r\n                console.log(success('Repository was created successfully'));\r\n                fulfill();\r\n            }, function(err) {\r\n                console.log(error(err));\r\n                reject(err);\r\n            });\r\n        \r\n        });\r\n        \r\n        \r\n    }\r\n}"],"sourceRoot":"E:\\Dropbox\\te_ndryshme\\Projekte\\Striker\\src"}