{"version":3,"sources":["gitter.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAM,UAAU,GAAG,kBAAQ,UAAU,CAAC;AACtC,IAAM,MAAM,GAAG,kBAAQ,MAAM,CAAC;AAC9B,IAAM,SAAS,GAAG,kBAAQ,SAAS,CAAC;AACpC,IAAM,SAAS,GAAG,kBAAQ,SAAS,CAAC;;AAEpC,IAAM,KAAK,GAAG,gBAAM,IAAI,CAAC,GAAG,CAAC;AAC7B,IAAM,OAAO,GAAG,gBAAM,IAAI,CAAC,KAAK,CAAC;;AAEjC,IAAM,YAAY,GAAG,aAAa,CAAC;;IAEd,MAAM;;;;;;AAKvB,aALiB,MAAM,CAKX,IAAI,EAAE;8BALD,MAAM;;AAMnB,YAAI,IAAI,EAAE;AACN,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACpB,MAAM;AACH,sBAAU,CAAC,IAAI,CAAC,eAAS,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,UAAU,EAAE;AAC9D,oBAAI,CAAC,IAAI,GAAG,UAAU,CAAC;aAC1B,CAAC,CAAC;SACN;KACJ;;;;;;;;AAAA;iBAbgB,MAAM;;mCAqBF;;;gBAAZ,IAAI,yDAAG,GAAG;;AACf,mBAAO,sBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,0BAAU,CAAC,IAAI,CAAC,eAAS,OAAO,CAAC,IAAI,CAAC,EAAE,cAAC,CAAc,CAAC,IAAI,CAAC,UAAC,UAAU,EAAK;AACzE,0BAAK,IAAI,GAAG,UAAU,CAAC;AACvB,2BAAO,CAAC,GAAG,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC,CAAC;AAC5D,2BAAO,CAAC,UAAU,CAAC,CAAC;iBACvB,EAAE,UAAC,GAAG,EAAK;AACR,2BAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,0BAAM,CAAC,GAAG,CAAC,CAAC;iBACf,CAAC,CAAC;aAEN,CAAC,CAAC;SACN;;;;;;;;;;iCAOuB;gBAAjB,IAAI,yDAAG,uBAAQ;;AAClB,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,gBAAI,IAAI,GAAG,eAAe,CAAC;AAC3B,gBAAI,KAAK,GAAG,yBAAyB,CAAC;AACtC,gBAAI,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AACvB,gBAAI,MAAM,GAAG,CAAC,CAAC;AACf,gBAAI,GAAG,GAAG,wBAAwB,CAAC;AACnC,gBAAI,UAAU,GAAG,CAAC,YAAY,CAAC,CAAC;AAChC,mBAAO,sBAAY,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,oBAAI,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;AAC5D,oBAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,IAAI,CAC/D,UAAC,GAAG,EAAK;AACL,2BAAO,CAAC,GAAG,CAAC,OAAO,CAAC,oCAAoC,CAAC,CAAC,CAAC;AAC3D,2BAAO,CAAC,GAAG,CAAC,CAAC;iBAChB,EAAE,UAAC,GAAG,EAAK;AACR,2BAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AACxB,0BAAM,CAAC,GAAG,CAAC,CAAC;iBACf,CAAC,CAAC;aACV,CAAC,CAAC;SACN;;;;;;4BAIU;AACP,mBAAO,IAAI,CAAC,IAAI,CAAC;SACpB;;;WAjEgB,MAAM;;;kBAAN,MAAM","file":"gitter.js","sourcesContent":["import chalk from 'chalk';\r\nimport nodegit from 'nodegit';\r\nimport nodepath from 'path';\r\nimport Promise from 'promise';\r\nimport moment from 'moment';\r\n\r\nconst Repository = nodegit.Repository;\r\nconst Commit = nodegit.Commit;\r\nconst Signature = nodegit.Signature;\r\nconst Reference = nodegit.Reference;\r\n\r\nconst error = chalk.bold.red;\r\nconst success = chalk.bold.green;\r\n\r\nconst WORKING_FILE = 'striker.txt';\r\n\r\nexport default class Gitter {\r\n    /**\r\n     * @constructor\r\n     * @param {Repository} repo - git repository\r\n     */\r\n    constructor(repo) {\r\n        if (repo) {\r\n            this.repo = repo;\r\n        } else {\r\n            Repository.open(nodepath.resolve('.')).then(function (repository) {\r\n                this.repo = repository;\r\n            });\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Initialize git repository\r\n     * \r\n     * @param {string} path - path to create new git repo\r\n     * @returns {promise}\r\n     */\r\n    initRepo(path = \".\") {\r\n        return new Promise((fulfill, reject) => {\r\n            Repository.init(nodepath.resolve(path), 0 /* isBare */).then((repository) => {\r\n                this.repo = repository;\r\n                console.log(success('Repository was created successfully'));\r\n                fulfill(repository);\r\n            }, (err) => {\r\n                console.log(error(err));\r\n                reject(err);\r\n            });\r\n\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Commit changes to repository\r\n     * \r\n     * @param {Date} date - date to commit\r\n     */\r\n    commit(date = moment()) {\r\n        let repo = this.repo;\r\n        let name = 'Aldi Alimucaj';\r\n        let email = 'aldi.alimucaj@gmail.com';\r\n        let time = date.unix();\r\n        let offset = 0;\r\n        let msg = 'Striker strikes again!';\r\n        let filesToAdd = [WORKING_FILE];\r\n        return new Promise((fulfill, reject) => {\r\n            var signature = Signature.create(name, email, time, offset);\r\n            repo.createCommitOnHead(filesToAdd, signature, signature, msg).then(\r\n                (oid) => {\r\n                    console.log(success('Changes were commited successfully'));\r\n                    fulfill(oid);\r\n                }, (err) => {\r\n                    console.log(error(err));\r\n                    reject(err);\r\n                });\r\n        });\r\n    }\r\n    \r\n    /* ========================================================================== */\r\n\r\n    get repo() {\r\n        return this.repo;\r\n    }\r\n}"],"sourceRoot":"E:\\Dropbox\\te_ndryshme\\Projekte\\Striker\\src"}